from PIL import Image
import time
import itertools


#How to use
# Run the script
# mount the disk folder in the emulator with the imagen file generated by the script on it.
# On the emulator do:
#   recordar "imagen
# Wait for the turtle to finish. (Boost emulation speed to 1000%)
# use ot, then bt after it finishes.


# Opens a image in RGB mode
# WARNING USE BIG PICTURES(over 300px) or it might break. I didnt have time to fix it lol.
# Use jpg format.
im = Image.open(r"input.jpg")

# Size of the image in pixels (size of original image)
width, height = im.size

# we code the palettes
palette = [
        0, 0, 0, #negro
        0, 204, 68, #verde medio
        102, 255, 153, #verde claro
        0, 0, 153, #azul oscuro
        102, 102, 255, #azul claro
        255, 51, 0, #rojo
        0, 255, 255, #celeste
        255, 51, 153, #rosa
        255, 179, 217, #rosa claro
        255, 255, 0, #amarillo
        255, 255, 153, #amarillo claro
        0, 77, 26, #verde oscuro
        207, 52, 118, #magenta
        127, 127, 127, #gris
        255, 255, 255 #blanco
        ]

paletteRGB = [
        (0, 0, 0), #negro
        (0, 204, 68), #verde medio
        (102, 255, 153), #verde claro
        (0, 0, 153), #azul oscuro
        (102, 102, 255), #azul claro
        (255, 51, 0), #rojo
        (0, 255, 255), #celeste
        (255, 51, 153), #rosa
        (255, 179, 217), #rosa claro
        (255, 255, 0), #amarillo
        (255, 255, 153), #amarillo claro
        (0, 77, 26), #verde oscuro
        (207, 52, 118), #magenta
        (127, 127, 127), #gris
        (255, 255, 255) #blanco
        ]

palleteCommandLetter = ["a","b","c","d","e","f","g","h","i","j","k","l","m","n","r",]


def GetWorkableImage():
    newHeight = height * (((width*100)/110) / 100) # Escalamos x el mismo porcentaje
    if(newHeight > 130):
        newHeight = 130
    newsize = (110, newHeight)
    img2 = im.resize(newsize)

    ## Convertimos la imagen a la paleta
    img3 = Image.new('P', (int(newsize[0]), int(newsize[1])))
    img3.putpalette(palette)

    conv = img2.quantize(palette=img3, dither=0)
    return conv


def SetUpPixel(imagen):
    imagen.write("para p\r")
    imagen.write("at 1 de 90\r")
    imagen.write("ad 1 iz 90\r")
    imagen.write("ad 1\r")
    imagen.write("fin\r")

def SetUpMoveToNextPixel(imagen):
    imagen.write("para q\r")
    imagen.write("de 90 ad 1\r")
    imagen.write("iz 90\r")
    imagen.write("fin\r")
    

def SendToStartPoint(imagen):
    imagen.write("sp\r")
    imagen.write("ad 70 iz 90\r")
    imagen.write("ad 120 de 90\r")
    imagen.write("cp\r")

def GoToNextLine(imagen):
    imagen.write("s\r")

def DibujarLinea(longPixeles, imagen):
    if longPixeles > 110:
        longPixeles = 110
    if longPixeles <= 3:
        for pixel in range(longPixeles):
            imagen.write("p\r")
            imagen.write("q\r")
    else:
        texto = "repetir " + str(longPixeles) + " [p q]\r"
        imagen.write(texto)

def _GetColor(indice):
    output = str(palleteCommandLetter[indice]) + "\r"
    return output

def SetUpColors(imagen):
    imagen.write("para a\r")
    imagen.write("fcolorp 1\r")
    imagen.write("fin\r")
    imagen.write("para b\r")
    imagen.write("fcolorp 2\r")
    imagen.write("fin\r")
    imagen.write("para c\r")
    imagen.write("fcolorp 3\r")
    imagen.write("fin\r")
    imagen.write("para d\r")
    imagen.write("fcolorp 4\r")
    imagen.write("fin\r")
    imagen.write("para e\r")
    imagen.write("fcolorp 5\r")
    imagen.write("fin\r")
    imagen.write("para f\r")
    imagen.write("fcolorp 6\r")
    imagen.write("fin\r")
    imagen.write("para g\r")
    imagen.write("fcolorp 7\r")
    imagen.write("fin\r")
    imagen.write("para h\r")
    imagen.write("fcolorp 8\r")
    imagen.write("fin\r")
    imagen.write("para i\r")
    imagen.write("fcolorp 9\r")
    imagen.write("fin\r")
    imagen.write("para j\r")
    imagen.write("fcolorp 10\r")
    imagen.write("fin\r")
    imagen.write("para k\r")
    imagen.write("fcolorp 11\r")
    imagen.write("fin\r")
    imagen.write("para l\r")
    imagen.write("fcolorp 12\r")
    imagen.write("fin\r")
    imagen.write("para m\r")
    imagen.write("fcolorp 13\r")
    imagen.write("fin\r")
    imagen.write("para n\r")
    imagen.write("fcolorp 14\r")
    imagen.write("fin\r")
    imagen.write("para r\r")
    imagen.write("fcolorp 15\r")
    imagen.write("fin\r")


def SetUpGoToNextLine(imagen):
    imagen.write("para s\r")
    imagen.write("sp\r")
    imagen.write("at 1 iz 90\r")
    imagen.write("ad 220 de 90\r") # Es 220 xq es el tama;o que estoy usando maximo de imagen aca..
    imagen.write("cp\r")
    imagen.write("fin\r")

def SetUpInstructionsFIle():
    imagen = open("imagen","w")

    #Seteamos los comandos en el archivo
    SendToStartPoint(imagen)
    SetUpPixel(imagen)
    SetUpGoToNextLine(imagen)
    SetUpMoveToNextPixel(imagen)
    SetUpColors(imagen)
    #It scans each line from left to right and draw it.
    # Usa el algoritmo de Run-length encoding , para saber cuantos pixeles tiene que pintar del mismo color.
    lastUsedColor = None

    for pixelY in range(rgb_img.size[1]):
        linea = [rgb_img.getpixel((x, pixelY)) for x in range(110)] # Valor hasta 110 ANCHO
        g = [(x, len(list(y))) for x, y in itertools.groupby(linea)]
        #print(g)
        for color, cant in g:
            if(lastUsedColor != color):
                imagen.write(_GetColor(paletteRGB.index(color)))
                lastUsedColor = color
            DibujarLinea(cant, imagen)
            print(f"Generando Archivo: " + str(int((pixelY*100)/rgb_img.size[1])) + "%")
        GoToNextLine(imagen)

    



# Codigo  del programa ####################

print("Started Clock.")
start_time = time.time()

img = GetWorkableImage()
rgb_img = img.convert('RGB')

#Setup process
SetUpInstructionsFIle()
print("Done setting up!.")

# Get the total runtime.
print(" Tardo --- %s segundos ---" % ((time.time() - start_time)))


# Show the image it was based on for comparison
rgb_img.show()






